<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Admin Panel - <%=title%></title>
	<% if (pageResources && pageResources.css) { %>
	  <% pageResources.css.forEach(function(css) { %>
		<link rel="stylesheet" href="<%= assetPath(css) %>">
	  <% }); %>
	<% } %>
	
	<% if (pageResources && pageResources.inlineStyles) { %>
	  <style>
		<%- pageResources.inlineStyles %>
	  </style>
	<% } %>	
	<!-- <script src="/static/assets/js/layout.js"></script> -->
	<script src="https://cdn.tailwindcss.com"></script>
	<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
	<link rel="apple-touch-icon" sizes="180x180" href="/static/assets/img/favicon/apple-touch-icon.png">
	<link rel="icon" type="image/png" sizes="32x32" href="/static/assets/img/favicon/favicon-32x32.png">
	<link rel="icon" type="image/png" sizes="16x16" href="/static/assets/img/favicon/favicon-16x16.png">
	<link rel="manifest" href="/static/assets/img/favicon/site.webmanifest">  
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.0/css/all.min.css">
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.0.1/css/bootstrap.min.css" integrity="sha512-Ez0cGzNzHR1tYAv56860NLspgUGuQw16GiOOp/I2LuTmpSK9xDXlgJz3XN4cnpXWDmkNBKXR/VDMTCnAaEooxA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>
<body class="flex h-screen">
	<div class="flex h-screen bg-gray-100 w-full">
		<!-- sidebar -->
		<div id="sidebar" class="hidden lg:flex flex-col w-64 bg-gray-800">
			<div class="flex items-center justify-center h-16 bg-gray-900">
				<span class="text-white font-bold uppercase">Monogenius app admin</span>
			</div>
			<div class="flex flex-col flex-1 overflow-y-auto">
				<nav class="flex-1 px-2 py-4 bg-gray-800">
					<% Object.entries(pageDetails).forEach(([pageKey, details]) => { %>
					<% const isActive = page && page === pageKey; %>
					<% const activeClass = isActive ? 'text-white bg-gray-500' : ''; %>
					<a href="/c/<%= pageKey %>" class="flex items-center px-4 py-2 text-gray-100 <%= activeClass %> hover:bg-gray-700">
						<i class="<%= details.icon %>"></i>
					   <span class="font-bold ml-5"><%= details.name %></span>
					</a>
					<% }); %>			
				</nav>
				
				<div class="flex items-center px-4 py-2 mt-auto bg-gray-700">
					<% if (!imgData) { %>
						<img src="/static/assets/img/profile.jpg" class="rounded-full mr-2" alt="Avatar">
					<% } else { %>
						<img src="<%= imgData[0] %>" id="imgProfile" class="rounded-full mr-2" width='50' height="50" alt="Avatar">
					<% } %>
					<span class="text-gray-100"><%= user.first_name %> <%= user.last_name %></span>
				</div>
			</div>
		</div>

		<!-- Main content -->
		<div class="flex flex-col flex-1 overflow-y-hidden">
			<div class="flex items-center justify-between p-2 bg-white border-b border-gray-200 shadow sticky top-0">
				<div class="flex items-center px-4 ">
					<button type="button" id="menuToogle" class="text-gray-500 focus:outline-none focus:text-gray-700">
						<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24"
							stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
								d="M4 6h16M4 12h16M4 18h16" />
						</svg>
					</button>
					<input class="mx-4 w-full border rounded-md px-4 py-2" type="text" placeholder="Search">
				</div>
			</div>
			<div class="">
				<%- include('pages/' + body) %>
			</div>
		</div>
	</div>
	
	<%
		function assetPath(path) {
		  return path + '?v=' + (process.env.ASSET_VERSION || '1');
		}
	%>
	
	<% if (pageResources && pageResources.js) { %>
	  <% pageResources.js.forEach(function(js) { %>
		<script src="<%= assetPath(js) %>"></script>
	  <% }); %>
	<% } %>	
<script>	
document.addEventListener('DOMContentLoaded', function () {
    const menuButton = document.getElementById('menuToogle');
    const sidebar = document.getElementById('sidebar');

    menuButton.addEventListener('click', function () {
      if (sidebar.classList.contains('hidden')) {
        sidebar.classList.remove('hidden');
		
      } else {
        sidebar.classList.add('hidden');
      }
    });
	
  const radioButtons = document.querySelectorAll('input[name="dataType"]');
  const usersData = document.getElementById('usersData');
  const revenueData = document.getElementById('revenueData');

	function formatNumber(number) {
	  if (number < 1000) {
		return number.toString();
	  } else if (number < 1000000) {
		const formattedNumber = (number / 1000).toFixed(2);
		return `${formattedNumber.replace(/\.0+$/, '')}K`;
	  } else {
		const formattedNumber = (number / 1000000).toFixed(2);
		return `${formattedNumber.replace(/\.0+$/, '')}M`;
	  }
	}

	function showModal(success, message) {
		const modalElement = document.getElementById(success ? 'successMessage' : 'failureMessage');
		const modalClass = success ? 'success-message' : 'failure-message';

		modalElement.innerText = message;
		modalElement.classList.add(modalClass);
		modalElement.style.display = 'block';

		// Esconde a mensagem após 3 segundos (3000 milissegundos)
		setTimeout(() => {
			modalElement.style.display = 'none';
			modalElement.classList.remove(modalClass);
		}, 3000);
	}

	function formatCurrency(value) {
	  return new Intl.NumberFormat('pt-MZ', {
		style: 'currency',
		currency: 'MZN',
		minimumFractionDigits: 2,
		maximumFractionDigits: 2
	  }).format(value);
	}
	
  radioButtons.forEach(radio => {
    radio.addEventListener('change', function() {
      radioButtons.forEach(rb => {
        rb.nextElementSibling.classList.remove('bg-indigo-100', 'text-indigo-700');
        rb.nextElementSibling.classList.add('bg-gray-100', 'text-gray-700');
      });
      this.nextElementSibling.classList.remove('bg-gray-100', 'text-gray-700');
      this.nextElementSibling.classList.add('bg-indigo-100', 'text-indigo-700');

      if (this.value === 'users') {
        usersData.classList.remove('hidden');
        revenueData.classList.add('hidden');
      } else {
        usersData.classList.add('hidden');
        revenueData.classList.remove('hidden');
      }
    });
  });
  const userCount = document.getElementById('userCount');
  const userList = document.getElementById('userList');
  const montlyRevenue = document.getElementById('revenue');
  const montlyRevenueDetails = document.getElementById('revenue-Details');
  const growthElement = document.querySelector('.growth');
  const topSourcesList = document.querySelector('.top-sources ul');
  
  async function getTotalUsers(){
	  try{
		  const response = await axios.get('/api/users')
		  userCount.textContent = formatNumber(response.data.length)
	  }catch(err){
		  console.error(err)
	  }
  }
  
  async function getTotalRevenue(){
    try {
      const response = await axios.get('/api/revenue');
      const { summary } = response.data;
      
      // Formatar e exibir a receita total
      const formattedRevenue = formatCurrency(summary.totalRevenue);
      montlyRevenue.textContent = formattedRevenue;
      montlyRevenueDetails.textContent = formattedRevenue;
      
      // Exibir o crescimento
      const growthPercentage = summary.growth.toFixed(2);
      growthElement.textContent = `${growthPercentage}%`;
      
      // Atualizar a cor do crescimento
      if (summary.growth > 0) {
        growthElement.classList.remove('text-blue-600');
        growthElement.classList.add('text-green-600');
      } else if (summary.growth < 0) {
        growthElement.classList.remove('text-blue-600');
        growthElement.classList.add('text-red-600');
      }
      
      // Exibir as principais fontes
      topSourcesList.innerHTML = summary.topSources.map(source => 
        `<li>${source.tier}: ${formatCurrency(source.amount)} (${source.percentage.toFixed(2)}%)</li>`
      ).join('');

      // Se não houver fontes, exibir uma mensagem
      if (summary.topSources.length === 0) {
        topSourcesList.innerHTML = '<li>Nenhuma fonte de receita no período selecionado</li>';
      }

    } catch(err) {
      console.error(err);
      showModal(false, 'Erro ao carregar dados de receita');
    }
  }  
  
  const deleteButtons = document.querySelectorAll('.delete-user')
  
	async function deleteUser(userId) {
		const confirmation = window.confirm('Tem certeza de que deseja excluir este usuário?');
		if (!confirmation) return;
		try {			
			const response = await axios.delete('/delete-user', data, config);
			
			if (response.data.error) {
				showModal(false,response.data.error);
			} else {
				showModal(true,'Usuário deletado com sucesso.');
				setTimeout(() => location.reload(), 2000);
			}
		} catch (err) {
			console.error('Erro na solicitação:', err);
			showModal(false,err.message);
		}
	}
  
  
	deleteButtons.forEach(btn=>{
	  btn.addEventListener('click',function(event){
		  const userId = this.closest('button').getAttribute('data-user-id');
		  deleteUser(userId)
	  })
	})
  
	getTotalUsers()
	getTotalRevenue()
  
	// Função para ordenar os itens na Listagem de usuários
	function sortTable(header, order) {
	  const table = header.closest('table');
	  const tbody = table.querySelector("tbody");
	  const rows = Array.from(tbody.querySelectorAll("tr"));
	  
	  // Obter índice da coluna baseado no cabeçalho clicado
	  const index = Array.from(header.parentNode.children).indexOf(header);
	  
	  // Ordenação de dados
	  rows.sort((a, b) => {
		const aColText = a.children[index].textContent.trim();
		const bColText = b.children[index].textContent.trim();
		
		// Tratamento especial para a coluna de data
		if (header.textContent.trim() === 'Date') {
		  return order === 'asc' 
			? new Date(aColText) - new Date(bColText)
			: new Date(bColText) - new Date(aColText);
		}
		
		// Ordenação padrão para outras colunas
		return order === 'asc'
		  ? aColText.localeCompare(bColText)
		  : bColText.localeCompare(aColText);
	  });
	  
	  // Remover todas as linhas existentes do corpo
	  tbody.innerHTML = '';
	  
	  // Adicionar linhas ordenadas novamente ao corpo
	  rows.forEach(row => tbody.appendChild(row));
	}

	let previousSortColumn;

	document.querySelectorAll(".sortable").forEach(header => {
	  header.addEventListener('click', function() {
		// Alternar ordem asc/desc
		const order = this.dataset.order === "asc" ? "desc" : "asc";
		this.dataset.order = order;
		
		// Atualizar ícone de ordenação para a coluna clicada
		const icon = this.querySelector("i");
		icon.className = order === "asc" ? "fas fa-sort-up" : "fas fa-sort-down";
		
		// Se houver uma coluna anterior, resetar o ícone
		if (previousSortColumn && previousSortColumn !== this) {
		  previousSortColumn.querySelector("i").className = "fas fa-sort";
		  delete previousSortColumn.dataset.order;
		}
		
		// Atualizar a coluna anterior
		previousSortColumn = this;
		
		// Ordenar tabela
		sortTable(this, order);
	  });
	});  
});
</script>	
</body>
</html>